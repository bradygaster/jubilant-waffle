@page
@model IndexModel
@{
    ViewData["Title"] = "DispatchR";
}

@section scripts
{
<script src="https://www.bing.com/api/maps/mapcontrol?key=AqapeevaeqxgZlYX8wfg-M9m4JdW7s3Qx42BqBcDY8n22hk7j1U4mSC5pYezdqym"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="~/js/signalr.min.js"></script>
<script>
    var map;
    const urlBase = 'http://localhost:3000';

    function loadMap() {
        map = new Microsoft.Maps.Map(document.getElementById('map'), {});
        map.setView({
            center: new Microsoft.Maps.Location(47.645050, -122.130210),
            zoom: 16
        });
        Microsoft.Maps.Events.addHandler(map, 'click', function (e) 
        { 
            console.log(e.location.latitude + ', ' + e.location.longitude);
        });
    }

    function getColorForStatus(status) {
        switch(status) {
            case 'New':
                return 'red';
                break;
            case 'Requested':
                return 'orange';
                break;
            case 'In Route':
                return 'blue';
                break;
            case 'Arrived':
                return 'green';
                break;
            default:
                return 'black';
        }
    }

    function getContentForStatus(status) {
        switch(status) {
            case 'New':
                return 'This location needs assistance. Click the <strong>Send for Help</strong> button below to get some help from a mobile user.';
                break;
            case 'Requested':
                return 'This location <strong>still</strong> needs attention. It has been requested previously but no one has accepted it yet.';
                break;
            case 'In Route':
                return 'Someone is on their way to this location.';
                break;
            case 'Arrived':
                return 'Someone has addressed this location already.';
                break;
            default:
                return 'black';
        }
    }

    function getPoints() {
        axios
            .get(urlBase + '/api/places')
            .then(function (response) {
                console.log(response.data);
                for(i=0; i<response.data.length; i++) {
                    var pushpin = new Microsoft.Maps.Pushpin(
                        {
                            latitude: response.data[i].latitude,
                            longitude: response.data[i].longitude
                        }, 
                        { 
                            color: getColorForStatus(response.data[i].status) 
                        });

                    pushpin.metadata = {
                        title: response.data[i].name,
                        placeId: response.data[i].id,
                        status: response.data[i].status
                    };

                    Microsoft.Maps.Events.addHandler(pushpin, 'click', function (args) 
                    {
                        console.log(args.target);
                        $('#sendHelpButton').data('placeId', args.target.metadata.placeId)
                        $('#exampleModalLabel').text(args.target.metadata.title);
                        
                        if(args.target.metadata.status != 'New' 
                            && args.target.metadata.status != 'Requested')
                            $('#sendHelpButton').hide();
                        else
                            $('#sendHelpButton').show();

                        $('#locationDialog').html(getContentForStatus(args.target.metadata.status));

                        $('#mapClickedModal').modal('toggle');
                    });

                    map.entities.push(pushpin);
                }
            })
            .catch(function (error) {
                console.log(error);
            });
    }

    function sendForHelp(e) {
        console.log("requesting help at: " + $(e).data('placeId'));
        connection
            .invoke("RequestAssistance", $(e).data('placeId'))
            .catch(function (err) {
                return console.error(err.toString());
            });
    }

    var connection = new signalR.HubConnectionBuilder().withUrl(urlBase + "/dispatchr").build();

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });
</script>
}

<div class="text-center">
    <h1 class="display-4">DispatchR</h1>
    <div class="row">
        <div id="map" class="col-12"></div>
    </div>
    <div class="row">
        <div class="col-1">
            <button type="button" class="btn btn-success" onclick="getPoints();">Step 1: Get Points</button>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="mapClickedModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="locationDialog">
        This location needs assistance. Click the <strong>Send for Help</strong> button below to get some help from a mobile user.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-dismiss="modal" id="sendHelpButton" data-placeId="" onclick="sendForHelp(this);">Send for Help</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" id="closeButton">Close</button>
      </div>
    </div>
  </div>
</div>